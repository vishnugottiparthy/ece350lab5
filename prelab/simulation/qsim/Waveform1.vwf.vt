// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/17/2017 18:02:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lpm_divider
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lpm_divider_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] denom;
reg [7:0] numer;
// wires                                               
wire [7:0] quotient;
wire [6:0] remain;

// assign statements (if any)                          
lpm_divider i1 (
// port map - connection between master ports and signals/registers   
	.denom(denom),
	.numer(numer),
	.quotient(quotient),
	.remain(remain)
);
initial 
begin 
#1000000 $finish;
end 
// denom[ 6 ]
initial
begin
	denom[6] = 1'b0;
end 
// denom[ 5 ]
initial
begin
	denom[5] = 1'b1;
end 
// denom[ 4 ]
initial
begin
	denom[4] = 1'b1;
end 
// denom[ 3 ]
initial
begin
	denom[3] = 1'b0;
end 
// denom[ 2 ]
initial
begin
	denom[2] = 1'b0;
end 
// denom[ 1 ]
initial
begin
	denom[1] = 1'b1;
end 
// denom[ 0 ]
initial
begin
	denom[0] = 1'b1;
end 
// numer[ 7 ]
initial
begin
	numer[7] = 1'b0;
end 
// numer[ 6 ]
initial
begin
	numer[6] = 1'b0;
	numer[6] = #640000 1'b1;
end 
// numer[ 5 ]
initial
begin
	numer[5] = 1'b0;
	numer[5] = #320000 1'b1;
	numer[5] = #320000 1'b0;
	numer[5] = #320000 1'b1;
end 
// numer[ 4 ]
initial
begin
	repeat(3)
	begin
		numer[4] = 1'b0;
		numer[4] = #160000 1'b1;
		# 160000;
	end
	numer[4] = 1'b0;
end 
// numer[ 3 ]
initial
begin
	repeat(6)
	begin
		numer[3] = 1'b0;
		numer[3] = #80000 1'b1;
		# 80000;
	end
	numer[3] = 1'b0;
end 
// numer[ 2 ]
initial
begin
	repeat(12)
	begin
		numer[2] = 1'b0;
		numer[2] = #40000 1'b1;
		# 40000;
	end
	numer[2] = 1'b0;
end 
// numer[ 1 ]
always
begin
	numer[1] = 1'b0;
	numer[1] = #20000 1'b1;
	#20000;
end 
// numer[ 0 ]
always
begin
	numer[0] = 1'b0;
	numer[0] = #10000 1'b1;
	#10000;
end 
endmodule

